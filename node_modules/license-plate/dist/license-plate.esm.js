/**
 * All dutch available sidecodes.
 *
 * @type {RegExp[]}
 */
var sidecodes = [/^([a-zA-Z]{2})([0-9]{2})([0-9]{2})$/, /^([0-9]{2})([0-9]{2})([a-zA-Z]{2})$/, /^([0-9]{2})([a-zA-Z]{2})([0-9]{2})$/, /^([a-zA-Z]{2})([0-9]{2})([a-zA-Z]{2})$/, /^([a-zA-Z]{2})([a-zA-Z]{2})([0-9]{2})$/, /^([0-9]{2})([a-zA-Z]{2})([a-zA-Z]{2})$/, /^([0-9]{2})([a-zA-Z]{3})([0-9])$/, /^([0-9])([a-zA-Z]{3})([0-9]{2})$/, /^([a-zA-Z]{2})([0-9]{3})([a-zA-Z])$/, /^([a-zA-Z])([0-9]{3})([a-zA-Z]{2})$/, /^([a-zA-Z]{3})([0-9]{2})([a-zA-Z])$/, /^([a-zA-Z])([0-9]{2})([a-zA-Z]{3})$/, /^([0-9])([a-zA-Z]{2})([0-9]{3})$/, /^([0-9]{3})([a-zA-Z]{2})([0-9])$/];

/**
 * All forbidden words in license plates.
 *
 * @type {string[]}
 */
var forbiddenWords = ['GVD', 'KKK', 'KVT', 'LPF', 'NSB', 'PKK', 'PSV', 'TBS', 'SS', 'SD'];

var LicensePlate = /*#__PURE__*/function () {
  /**
   * Constructs the licence plate with the input value as uppercase.
   */
  function LicensePlate(licensePlate) {
    this.licensePlate = licensePlate.replace(/-/g, '').toUpperCase();
  }
  /**
   * Checks if the given license plate is valid.
   *
   * @public
   * @return {boolean} True if sidecode matches, false if none matches.
   */


  var _proto = LicensePlate.prototype;

  _proto.valid = function valid() {
    return this.sidecode() !== 0 && !this.forbidden();
  }
  /**
   * Finds the matching sidecode by the given license plate. and returns
   * the index of the sidecode in a human-readable format (+1).
   *
   * @public
   * @return {number} The index of the sidecode, 0 if not found.
   */
  ;

  _proto.sidecode = function sidecode() {
    var _this = this;

    return sidecodes.findIndex(function (sidecode) {
      return _this.licensePlate.match(sidecode);
    }) + 1;
  }
  /**
   * Finds the matching sidecode and returns the Regex pattern associated.
   *
   * @private
   * @return {RegExp} The Regex pattern.
   */
  ;

  _proto.getSidecodePattern = function getSidecodePattern() {
    return sidecodes[this.sidecode() - 1];
  }
  /**
   * Converts a license plate to the Regex equivalent based on the sidecode found.
   *
   * @private
   * @param sidecode {RegExp} The Regex pattern to use when converting input plate.
   */
  ;

  _proto.convertPlate = function convertPlate(sidecode) {
    var _this$licensePlate$ma;

    var matches = (_this$licensePlate$ma = this.licensePlate.match(sidecode)) != null ? _this$licensePlate$ma : [];
    matches.shift();
    return matches.join('-');
  }
  /**
   * Formats the input license plate to real license plate based on the matched sidecode.
   *
   * @public
   * @returns {string} The formatted license plate.
   */
  ;

  _proto.pretty = function pretty() {
    var pattern = this.getSidecodePattern();
    return this.convertPlate(pattern);
  }
  /**
   * Checks whether the given license plate included some forbidden letter combinations.
   *
   * Starting from sidecode 7, political abbreviations from political parties were excluded,
   * except VVD, they were excluded starting from sidecode 8.
   *
   * Sources:
   * https://nl.wikipedia.org/wiki/Nederlands_kenteken
   * https://www.rdw.nl/particulier/voertuigen/auto/de-kentekenplaat/cijfers-en-letters-op-de-kentekenplaat
   *
   * @return {boolean}
   * @private
   */
  ;

  _proto.forbidden = function forbidden() {
    var forbidden = forbiddenWords;

    if (this.sidecode() >= 7) {
      forbidden = [].concat(forbidden, ['PVV', 'SGP']);
    }

    if (this.sidecode() >= 8) {
      forbidden = [].concat(forbidden, ['VVD']);
    }

    var formattedPlate = this.pretty();
    return forbidden.some(function (word) {
      return formattedPlate.includes(word);
    });
  };

  return LicensePlate;
}();

export default LicensePlate;
//# sourceMappingURL=license-plate.esm.js.map
